using CommandLine;
using System.Text.RegularExpressions;

namespace WarOfRightsUnpack.Main
{
    public static class ExtractMisc
    {
        private static List<string> Tips { get; set; }

        private const string MiscClassTemplate =
@"namespace WarOfRightsUnpack.Generated
{{
    // NOTE: Generated by WarOfRightsUnpack from text_ui_menus.xml

    public static class Misc
    {{
        // ui_gametip\d+
        public static string[] Tips = new[]
        {{
{0}
        }};
    }}
}}
";

        private static string GetPattern(string identifier)
        {
            return $@"<Row.*>\r\n\s+(<Cell.*>\r\n\s+)?<Cell.*><Data.*>{identifier}</Data></Cell>\r\n\s+<Cell.*><Data.*>(?<data>.*)</Data></Cell>\r\n\s+<Cell.*><Data.*>(.*)</Data></Cell>\r\n\s+(<Cell.*>\r\n\s+)?</Row>";
        }

        private static string GenerateCSharpFile()
        {
            return string.Format(format: MiscClassTemplate,
                string.Join($",{Environment.NewLine}", Tips.Select(x => $"\t\t\t\"{x}\"")));
        }

        public static void Run(Options options)
        {
            try
            {
                var fileInfo = new FileInfo(options.FileName);
                var xml = File.ReadAllText(fileInfo.FullName);

                Tips = new List<string>();

                var tipMatches = Regex.Matches(xml, GetPattern(@"ui_gametip\d+"));
                Console.WriteLine("Total items: " + tipMatches.Count + Environment.NewLine);
                foreach (Match match in tipMatches)
                {
                    var id = match.Groups["id"].ToString();
                    var tip = match.Groups["data"].ToString();

                    Tips.Add(tip);
                }

                var targetFileName = "Misc.cs";
                Console.WriteLine("Writing to file: " + targetFileName);
                File.WriteAllText(targetFileName, GenerateCSharpFile());

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.StackTrace);
            }

        }

        [Verb("extractMisc", HelpText = "Extracts a structured csharp class with miscellaneous items from the in-game xml.")]
        public class Options
        {
            [Option(longName: "filename", shortName: 'f', Required = true, HelpText = "File path to the target xml (text_ui_menus.xml).")]
            public string FileName { get; set; }
        }
    }
}
